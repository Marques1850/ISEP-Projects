Define constants:
  - LINES: the number of lines in the board
  - COLUMNS: the number of columns in the board
  - NUM_USERS: the number of user processes to create
  - SEMAPHORE_NAME: the name of the semaphore
  - MAX_CONTENT: the maximum value for content in the board

Define a board structure:
  - content: a 2D array representing the board

Declare a semaphore pointer:
  - lock: semaphore used for synchronization

Define a readContent function:
  - Receives line, column, and the test_board as parameters
  - Prints the request to read the board
  - Uses a loop to print the content of the board
  - Calls sem_post to release the lock

Define a writeContent function:
  - Receives line, column, new_content, and the test_board as parameters
  - Prints the request to write in the board
  - Updates the content of the board at the specified position
  - Uses a loop to print the content of the board
  - Calls sem_post to release the lock

Define the main function:
  Declare variables:
    - test_board: shared memory for the board
    - fd: file descriptor for the shared memory
    - pid: process ID variable
    - i: loop variable
    - line, column: random line and column values
    - error_check: variable for error checking

  Create shared memory for the board:
    - Use shm_open to create or open a shared memory segment
    - Use ftruncate to set the size of the shared memory segment
    - Use mmap to map the shared memory segment into the process's address space
    - Check for errors during each step

  Set up the semaphore:
    - Unlink the semaphore if it already exists
    - Use sem_open to create the semaphore
    - Check for errors

  Initialize the board with 0's:
    - Use nested loops to set the content of the board to 0

  Post a signal to the semaphore:
    - Call sem_post to allow child processes to access the board

  Create user processes:
    - Use a loop to fork multiple child processes (up to NUM_USERS)
      - Fork a child process
      - If it's a child process:
        - Seed the random number generator
        - Generate random line and column values
        - Call sem_wait to wait for the semaphore to be available
        - Randomly decide whether to read or write to the board
        - Call the corresponding function (readContent or writeContent)
        - Exit the child process

  Wait for all user processes to finish:
    - Use a loop to call wait for each child process

  Print the final board:
    - Use nested loops to print the content of the board

  Clean up and exit:
    - Unmap the shared memory segment
    - Unlink the shared memory segment
    - Close the semaphore
    - Unlink the semaphore