@startuml

top to bottom direction

class CreateFormativeExamUI {
    * CreateFormativeExamController theController
    + doShow() : boolean
    + headline() : String
    + showTypeQuestions(final List<QuestionType> perms) : QuestionType
}

class CreateFormativeExamController {
    * QuestionRepository questionRepository
    * FormativeExamRepository formativeExamRepository
    * ServiceGetQuestions serviceGetQuestions
    * VerifyFormativeExamService verifyFormativeExamService
    * List<List<String>> sections
    * int sectionNumber
    + createSection(QuestionType type, int numberOfQuestionsInSection, String sectionDescription, double questionCotation, String sectionType) : void
    + createFormativeExam(String examName, String examHeaderDescription, String examDate, String examCode, String courseCode) : void
    + verifyFormativeExam(List<String> exam) : void
}

class ServiceGetQuestions {
    + getQuestions(QuestionType type, int numberOfQuestionsInSection, QuestionRepository questionRepository) : List<Question>
}

class VerifyFormativeExamService {
    + verify (String ficheiro): void
}

class SystemUser <<root>> <<Entity>> {
    * Name
    * Username
}

class eCourseSystemUser <<root>> <<Entity>> {

}

class EmailAdderss <<Value object>>

class Role <<Entity>> {
    * String name
}

class UserStatus <<enum>> {
    + ENABLE
    + DISABLE
}

class Password <<value object>>

class Acronym <<value object>>

class NIF <<value object>>

class BirthDate <<value object>>

class MechanographicNumber <<value object>> <<automatically generated>>

class Grade <<value object>>

class Course {
    * int id
    * name
    * CourseStatus status
    * Code code
    * Teacher regent
    + Course(int id, String name, CourseStatus status, Code code, Teacher regent)
}

class Exam <<root>> <<event>> {
    * title <<unique>>
    * openDate
    * closeDate
}

class ExamGrade <<value object>> {
    * int grade
    * eCourseSystemUser student
}

class RepositoryFactory {

}

class ExamRepository {
    + addExam(Exam: Exam)
    + removeExam(Exam: Exam)
    + searchExam(Exam: Exam): Exam
    + totalNumberOfExams(): int
}

class ExamReadFile {
    + FileToString(String path) : List<String>
}



SystemUser --> "1" EmailAdderss
SystemUser --> "1" Password
SystemUser --> "1" Role

eCourseSystemUser --> "1" SystemUser
eCourseSystemUser --> "1" Role
eCourseSystemUser --> "1" UserStatus
eCourseSystemUser --> "1" Acronym
eCourseSystemUser --> "1" NIF
eCourseSystemUser --> "1" BirthDate
eCourseSystemUser --> "1" MechanographicNumber
eCourseSystemUser --> "1" Grade : student has a >

eCourseSystemUser --> VerifyExamService : uses >

eCourseSystemUser "*" - "*" Exam : creates/updates >


Course --> "1" CourseStatus
Course --> "1" CourseCode

Course "1" -- "1" Grade : refers to <
Course "1" -- "0..*" Exam : related to <

Course "1" - "*" Class : has >
Course "*" - "*" eCourseSystemUser : teacher teaches <


Exam "1" -- "1" ExamGrade : has >
Exam "*" -- "1" CourseCode : has >
Exam "*" -- "*" ExamGrade : has >
ExamGrade "*" -- "1" eCourseSystemUser : has >


eCourseSystemUser .. CreateFormativeExamUI
CreateFormativeExamUI .. CreateFormativeExamController
CreateFormativeExamController .. RepositoryFactory
CreateFormativeExamController .. ServiceGetQuestions
CreateFormativeExamController .. FormativeExamRepository
CreateFormativeExamController ..VerifyFormativeExamService
CreateExamController .. FormativeExam
VerifyExamService .. FormativeExam




@enduml