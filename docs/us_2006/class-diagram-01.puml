@startuml

top to bottom direction

class ListExamGradesCourseUI {
    + getExamGradesOfCourse() : List<ExamGradesDto>
}

class ListExamGradesCourseController {
    + session() : Session
    + authenticatedUser() : eCourseSystemUser
    + getExamGradesOfCourse(user) : List<ExamGrades>
}

class SeeTeacherCourseGradesService {
    + searchUser(user) : eCourseSystemUser
    + isRegent(teacher) : course
    + getgetExamGradesOfCourse(course) : List<ExamGrades>
}

class ListExamGradesCourseService {
    + findExamGrades(course) : List<ExamGrades>
}

class SystemUser <<root>> <<Entity>> {
    * Name
    * Username
}

class eCourseSystemUser <<root>> <<Entity>> {

}

class EmailAdderss <<Value object>>

class Role <<Entity>> {
    * String name
}

class UserStatus <<enum>> {
    + ENABLE
    + DISABLE
}

class Password <<value object>>

class Acronym <<value object>>

class NIF <<value object>>

class BirthDate <<value object>>

class MechanographicNumber <<value object>> <<automatically generated>>

class Grade <<value object>>

class Course {
    * int id
    * name
    * CourseStatus status
    * Code code
    * Teacher regent
    + Course(int id, String name, CourseStatus status, Code code, Teacher regent)
}

class Exam <<root>> <<event>> {
    * title <<unique>>
    * openDate
    * closeDate
}

class ExamGrade <<value object>> {
    * int grade
    * eCourseSystemUser student
}

class RepositoryFactory {

}

class UserRepository {
    + addUser(user: user)
    + removeUser(user: user)
    + CreateUser(String: fullName, String: fhortName, \n  Role: role, Email: email, Password, password)
    + searchUser(user: user): User
    + alterUserStatus(User: user)
    + totalNumberOfUsers(): int
    + listSystemUsers(): List<User>
}

class ExamRepository {
    + addExam(Exam: Exam)
    + removeExam(Exam: Exam)
    + searchExam(Exam: Exam): Exam
    + totalNumberOfExams(): int
}



SystemUser --> "1" EmailAdderss
SystemUser --> "1" Password
SystemUser --> "1" Role

eCourseSystemUser --> "1" SystemUser
eCourseSystemUser --> "1" Role
eCourseSystemUser --> "1" UserStatus
eCourseSystemUser --> "1" Acronym
eCourseSystemUser --> "1" NIF
eCourseSystemUser --> "1" BirthDate
eCourseSystemUser --> "1" MechanographicNumber
eCourseSystemUser --> "1" Grade : student has a >


eCourseSystemUser .. ListExamGradesCourseUI
ListExamGradesCourseUI .. ListExamGradesCourseController
ListExamGradesCourseController .. RepositoryFactory
ListExamGradesCourseController .. SeeTeacherCourseGradesService
SeeTeacherCourseGradesService .. UserRepository
SeeTeacherCourseGradesService .. ListExamGradesCourseService
ListExamGradesCourseService .. ExamRepository

Course --> "1" CourseStatus
Course --> "1" CourseCode

Course "1" -- "1" Grade : refers to <
Course "1" -- "0..*" Exam : related to <

Course "*" - "*" eCourseSystemUser : teaches <

Exam "1" -- "1" ExamGrade : has >
ExamGrade "1" -- "1" eCourseSystemUser : has >



@enduml