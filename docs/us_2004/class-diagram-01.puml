@startuml

top to bottom direction

class TakeExamUI {
    + doShow()
    + showExams(final List<ExamDto> exams)
    + buildExamsMenu(final List<ExamDto> exams) : Menu
    + headline() : String
}

class TakeExamController {
    * AuthorizationService authz
    * eCourseUserRepository repo
    * ExamRepository repoE
    * TakeExamService service
    + getTakeableExams() : List<ExamDto>
    + getUser() : SystemUser
    + takeExam(String examCode)
}

class SystemUser <<root>> <<Entity>> {
    * Name
    * Username
}

class eCourseSystemUser <<root>> <<Entity>> {

}

class EmailAdderss <<Value object>>

class Role <<Entity>> {
    * String name
}

class UserStatus <<enum>> {
    + ENABLE
    + DISABLE
}

class Password <<value object>>

class Acronym <<value object>>

class NIF <<value object>>

class BirthDate <<value object>>

class MechanographicNumber <<value object>> <<automatically generated>>

class Grade <<value object>>

class Course {
    * int id
    * name
    * CourseStatus status
    * Code code
    * Teacher regent
    + Course(int id, String name, CourseStatus status, Code code, Teacher regent)
}

class Exam <<root>> <<event>> {
    * title <<unique>>
    * openDate
    * closeDate
}

class ExamGrade <<value object>> {
    * int grade
    * eCourseSystemUser student
}

class RepositoryFactory {

}

class UserRepository {
    + addUser(user: user)
    + removeUser(user: user)
    + CreateUser(String: fullName, String: fhortName, \n  Role: role, Email: email, Password, password)
    + searchUser(user: user): User
    + alterUserStatus(User: user)
    + totalNumberOfUsers(): int
    + listSystemUsers(): List<User>
}

class ExamRepository {
    + addExam(Exam: Exam)
    + removeExam(Exam: Exam)
    + searchExam(Exam: Exam): Exam
    + totalNumberOfExams(): int
}

class ExamDto {
     * code
     * name
     * description
     * CourseCode
     * openDate
     * closeDate
     + ExamDto(String code, String name, String description, String courseCode, String openDate, String closeDate)
     + ExamDto toDto(exam)
     + toString()
}

class TakeExamService <<service>> {
    * ListExamCoursesService listExamCoursesService
    * eCourseSystemUser fuser
    + getExams(SystemUser user, ExamRepository repoE, eCourseUserRepository repo) : List<Exam>
    + findUser(SystemUser user, eCourseUserRepository repo ) : eCourseSystemUser
    + getStudentCourses(eCourseSystemUser user) : List<Course>
    + takeExam(exam)

}

class ListExamCoursesService {
    + getFutureExams(List<Course> courses,ExamRepository repo) : List<Exam>
    + getTakeableExams(List<Course> courses, ExamRepository repoE) : List<Exam>
}

class ExamValListener {
}



'Relationships

SystemUser --> "1" EmailAdderss
SystemUser --> "1" Password
SystemUser --> "1" Role

eCourseSystemUser --> "1" SystemUser
eCourseSystemUser --> "1" Role
eCourseSystemUser --> "1" UserStatus
eCourseSystemUser --> "1" Acronym
eCourseSystemUser --> "1" NIF
eCourseSystemUser --> "1" BirthDate
eCourseSystemUser --> "1" MechanographicNumber
eCourseSystemUser --> "1" Grade : student has a >

eCourseSystemUser --> TakeExamService : use >
eCourseSystemUser --> ListExamCoursesService : use >

eCourseSystemUser "*" -- "*" Exam : take a >


Course --> "1" CourseStatus
Course --> "1" CourseCode

Course "1" -- "1" Grade : refers to <

Course "*" - "*" eCourseSystemUser : is in a <

Exam "1" -- "1" ExamGrade : has >
Exam "*" -- "1" CourseCode : has >
ExamGrade "1" -- "1" eCourseSystemUser : has >

eCourseSystemUser .. TakeExamUI
TakeExamUI .. TakeExamController
TakeExamController .. RepositoryFactory
TakeExamController .. ExamRepository
TakeExamController .. UserRepository
TakeExamController .. TakeExamService
TakeExamController .. Exam
TakeExamController .. eCourseSystemUser
TakeExamController .. Course
TakeExamController .. ExamDto
TakeExamService .. ListExamCoursesService
TakeExamService .. ExamValListener
ExamValListener .. TakeExamUI




@enduml